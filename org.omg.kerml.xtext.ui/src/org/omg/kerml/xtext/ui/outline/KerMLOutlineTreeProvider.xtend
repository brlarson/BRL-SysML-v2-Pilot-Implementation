/*
 * generated by Xtext 2.12.0
 */
package org.omg.kerml.xtext.ui.outline

import java.net.URLDecoder
import org.eclipse.emf.ecore.EObject
import org.eclipse.swt.graphics.Image
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.BackgroundOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.omg.sysml.lang.sysml.Annotation
import org.omg.sysml.lang.sysml.Association
import org.omg.sysml.lang.sysml.Comment
import org.omg.sysml.lang.sysml.Conjugation
import org.omg.sysml.lang.sysml.Connector
import org.omg.sysml.lang.sysml.Disjoining
import org.omg.sysml.lang.sysml.Element
import org.omg.sysml.lang.sysml.Expression
import org.omg.sysml.lang.sysml.Feature
import org.omg.sysml.lang.sysml.FeatureChaining
import org.omg.sysml.lang.sysml.FeatureInverting
import org.omg.sysml.lang.sysml.FeatureMembership
import org.omg.sysml.lang.sysml.FeatureValue
import org.omg.sysml.lang.sysml.LibraryPackage
import org.omg.sysml.lang.sysml.LiteralBoolean
import org.omg.sysml.lang.sysml.LiteralInfinity
import org.omg.sysml.lang.sysml.LiteralInteger
import org.omg.sysml.lang.sysml.LiteralRational
import org.omg.sysml.lang.sysml.LiteralString
import org.omg.sysml.lang.sysml.Membership
import org.omg.sysml.lang.sysml.MembershipImport
import org.omg.sysml.lang.sysml.Namespace
import org.omg.sysml.lang.sysml.NamespaceImport
import org.omg.sysml.lang.sysml.NullExpression
import org.omg.sysml.lang.sysml.OperatorExpression
import org.omg.sysml.lang.sysml.OwningMembership
import org.omg.sysml.lang.sysml.Relationship
import org.omg.sysml.lang.sysml.Specialization
import org.omg.sysml.lang.sysml.SysMLPackage
import org.omg.sysml.lang.sysml.TextualRepresentation
import org.omg.sysml.lang.sysml.Type
import org.omg.sysml.lang.sysml.TypeFeaturing
import org.omg.sysml.lang.sysml.VisibilityKind
import org.omg.sysml.util.ElementUtil
import org.omg.sysml.util.FeatureUtil
import org.omg.sysml.util.TypeUtil
import org.eclipse.jface.resource.ImageDescriptor

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class KerMLOutlineTreeProvider extends //DefaultOutlineTreeProvider
// Switch root class to extend to do outline in background (BRL 06/18/2024)
    BackgroundOutlineTreeProvider
 {
	
	def String metaclassText(Element element) {
		ElementUtil.transform(element);
		var text = element?.eClass.name
		if (element.isLibraryElement) {
			text += ' lib'
		}
		text
	}
	
	def String idText(Element element) {
		var text = ""
		if (element?.declaredShortName !== null) {
			text += ' <' + element.declaredShortName + '>'
		}
		val name = element?.getName
		if (name !== null) {
			text += ' ' + name
		}
		text
	}

	def String _text(Element element) {
		element.metaclassText + element.idText
	}
	
	def String _text(Namespace namespace) {
		if (namespace.eContainer !== null || namespace.eResource === null)
			(namespace as Element)._text
		else 
			'Root ' + URLDecoder.decode(namespace.eResource.URI.lastSegment, "UTF-8")
	}
	
	def String _text(VisibilityKind visibility) {
		visibility.toString
	}
	
	def String prefixText(Membership membership) {
		var text = membership.metaclassText
		if (membership instanceof OwningMembership) {
			text += ' owns'
		}
		if (membership.visibility !== null) {
			text += ' ' + membership.visibility._text
		}
		text
	}
	
	def String nameText(Membership membership) {
		var text = ''
		val shortName = membership.memberShortName
		if (shortName !== null) {
			text += ' <' + shortName + '>'
		}
		val name = membership.memberName
		if (name !== null) {
			text += ' ' + name
		}
		text
	}
	
	def String _text(Membership membership) {
		membership.prefixText + membership.nameText
	}
	
	def String _text(FeatureValue featureValue) {
		var text = featureValue.metaclassText
		if (featureValue.isDefault) {
			text += ' default'
		}
		if (featureValue.isInitial) {
			text += ' initial'
		}
		text
	}	
	
	def String _text(MembershipImport import_) {
		var text = import_.metaclassText
		if (import_.visibility !== null) {
			text += ' ' + import_.visibility._text
		}
		if (import_.importedMembership?.memberName !== null) {
			text += ' ' + import_.importedMembership.memberName
		}
		if (import_.isRecursive) {
			text += "::**"
		}
		text
	}
	
	def String _text(NamespaceImport import_) {
		var text = import_.metaclassText
		if (import_.visibility !== null) {
			text += ' ' + import_.visibility._text
		}
		if (import_.importedNamespace?.declaredName !== null) {
			text += ' ' + import_.importedNamespace.declaredName
		}
		text += "::*"
		if (import_.isRecursive) {
			text += "::**"
		}
		text
	}
	
	def String typePrefixText(Type type) {
		var text = type.metaclassText
		if (type.isAbstract) {
			text += ' abstract'
		}
		text
	}
	
	def String _text(Type type) {
		if (type instanceof Feature) (type as Feature)._text
		else type.typePrefixText + type.idText
	}
	
	def String featurePrefixText(Feature feature) {
		var text = feature.metaclassText
		if (feature.direction !== null) {
			text += ' ' + feature.direction
		}
		if (feature.isAbstract) {
			text += ' abstract'
		}
		if (feature.isComposite) {
			text += ' composite'
		}
		if (feature.isPortion) {
			text += ' portion'
		}
		if (feature.isReadOnly) {
			text += ' readonly'
		}
		if (feature.isDerived) {
			text += ' derived'
		}
		if (feature.isEnd) {
			text += ' end'
		}
		text
	}
	
	def String featureIdText(Feature feature) {
		var idText = feature.idText
		if (idText == "" && !feature.ownedFeatureChaining.empty) {
			for (chainingFeature: feature.chainingFeature) {
				if (idText == "") {
					idText = chainingFeature.idText
				} else {
					var nextId = chainingFeature.idText
					if (!nextId.isEmpty) {
						nextId = nextId.substring(1);
					}
					idText += "." + nextId
				}
			}
		}
		idText
	}
	
	def String _text(Feature feature) {
		feature.featurePrefixText + feature.featureIdText
	}
	
	def String _text(Expression expression) {
		var text = (expression as Feature)._text
		if (expression.isModelLevelEvaluable) {
			text += " model-level"
		}
		text
	}
	
	def String _text(LiteralString literal) {
		literal.metaclassText + ' ' + literal.value
	}
	
	def String _text(LiteralBoolean literal) {
		literal.metaclassText + ' ' + literal.value
	}
	
	def String _text(LiteralInteger literal) {
		literal.metaclassText + ' ' + literal.getValue
	}
	
	def String _text(LiteralRational literal) {
		literal.metaclassText + ' ' + literal.getValue
	}
	
	def String _text(LiteralInfinity literal) {
		literal.metaclassText + ' *'
	}
	
	def String _text(NullExpression expression) {
		expression.metaclassText + ' null'
	}
	
	def String _text(LibraryPackage pkg) {
		var prefixText = pkg.metaclassText
		if (pkg.isStandard) {
			prefixText += ' std'
		}
		prefixText + pkg.idText
	}
	
	def boolean _isLeaf(Relationship relationship) {
		false
	}
	
	def void _createChildren(IOutlineNode parentNode, Relationship relationship) {
		createRelatedElements(parentNode, relationship)
		super.createChildren(parentNode, relationship)
	}
	
	def createRelatedElements(IOutlineNode parentNode, Relationship relationship) {
		for (source: relationship.source) {
			createNode(parentNode, source, 
				getImageDescriptor(source), 'from ' + getText(source), 
				!(source instanceof Feature) || (source as Feature).ownedFeatureChaining.empty
			)
		}
		for (target: relationship.target) {
			createNode(parentNode, target, 
				getImageDescriptor(target), 'to ' + getText(target), 
				!(target instanceof Feature) || (target as Feature).ownedFeatureChaining.empty
			)
		}
	}
	
	def boolean _isLeaf(Annotation annotation) {
		false
	}
	
	def void _createChildren(IOutlineNode parentNode, Annotation annotation) {
		super.createChildren(parentNode, annotation)
		if (annotation.annotatedElement !== null) {
			createNode(parentNode, annotation.annotatedElement, 
				getImageDescriptor(annotation.annotatedElement), 
				annotation.annotatedElement._text, 
				true
			)
		}
	}
	
	def boolean _isLeaf(Comment comment) {
		comment.body === null && super.isLeaf(comment)
	}
	
	def void _createChildren(IOutlineNode parentNode, Comment comment) {
		if (comment.locale !== null) {
			createNode(parentNode, //comment, 
				SysMLPackage.eINSTANCE.comment_Locale, 
				getImageDescriptor(comment.locale), "locale " + comment.locale, true
			)
		}
		if (comment.body !== null) {
			createNode(parentNode, //comment, 
				SysMLPackage.eINSTANCE.comment_Body, 
				getImageDescriptor(comment.body), comment.body, true
			)
		}
		super.createChildren(parentNode, comment)
	}
	

	def boolean _isLeaf(TextualRepresentation rep) {
		rep.language === null && rep.body === null && super.isLeaf(rep)
	}
	
	def void _createChildren(IOutlineNode parentNode, TextualRepresentation rep) {
		if (rep.language !== null) {
			createNode(parentNode, // rep, 
				SysMLPackage.eINSTANCE.textualRepresentation_Language, 
				getImageDescriptor(rep.language), "language " + rep.language, true
			)
		}
		if (rep.body !== null) {
			createNode(parentNode, // rep, 
				SysMLPackage.eINSTANCE.textualRepresentation_Body, 
				getImageDescriptor(rep.body), rep.body, true
			)
		}
		super.createChildren(parentNode, rep)
	}	

	def boolean _isLeaf(Membership membership) {
		false
	}
	
	def void _createChildren(IOutlineNode parentNode, Membership membership) {
		super.createChildren(parentNode, membership)
		var memberElement = membership.memberElement;
		if (!(membership instanceof OwningMembership) && 
				memberElement !== null) {
			createNode(parentNode, memberElement, 
				getImageDescriptor(memberElement), memberElement._text, 
				true
			)
		}
	}
	
	def boolean _isLeaf(FeatureMembership membership) {
		false
	}
	
	// Display a FeatureMembership like a Membership, rather than like a TypeFeaturing.
	def void _createChildren(IOutlineNode parentNode, FeatureMembership membership) {
		_createChildren(parentNode, membership as Membership)
	}
	
	def boolean _isLeaf(MembershipImport _import) {
		_import.importedMembership === null
	}
	
	def void _createChildren(IOutlineNode parentNode, MembershipImport _import) {
		super.createChildren(parentNode, _import)
		var importedMembership = _import.importedMembership;
		if (importedMembership !== null) {
			createNode(parentNode, importedMembership, 
				getImageDescriptor(importedMembership), importedMembership._text, true
			)
		}
	}
	
	def boolean _isLeaf(NamespaceImport _import) {
		_import.importedNamespace === null && _import.ownedRelatedElement.isEmpty
	}
	
	def void _createChildren(IOutlineNode parentNode, NamespaceImport _import) {
		super.createChildren(parentNode, _import)
		var importedNamespace = _import.importedNamespace;
		if (importedNamespace !== null && importedNamespace.owningRelationship !== _import) {
			createNode(parentNode, importedNamespace, 
				getImageDescriptor(importedNamespace), importedNamespace._text, true
			)
		}
	}
	
	def boolean _isLeaf(TypeFeaturing featuring) {
		featuring.featuringType === null
	}
	
	def void _createChildren(IOutlineNode parentNode, TypeFeaturing featuring) {
		if (featuring.featureOfType !== null && featuring.featureOfType !== featuring.eContainer) {
			createNode(parentNode, featuring.featureOfType, 
				getImageDescriptor(featuring.featureOfType), featuring.featureOfType._text, 
				true
			)			
		}
		if (featuring.featuringType !== null) {
			createNode(parentNode, featuring.featuringType, 
				getImageDescriptor(featuring.featuringType), featuring.featuringType._text, 
				true
			)
		}
	}
	
	def boolean _isLeaf(FeatureChaining chaining) {
		chaining.chainingFeature === null
	}
	
	def void _createChildren(IOutlineNode parentNode, FeatureChaining chaining) {
		if (chaining.chainingFeature !== null) {
			createNode(parentNode, chaining.chainingFeature, 
				getImageDescriptor(chaining.chainingFeature), chaining.chainingFeature._text, 
				true
			)
			
		}
	}
	
	def boolean _isLeaf(Specialization specialization) {
		specialization.getGeneral === null
	}
	
	def void _createChildren(IOutlineNode parentNode, Specialization specialization) {
		val specific = specialization.specific
		if (specific !== null && specific !== specialization.eContainer) {
			createNode(parentNode, specific, getImageDescriptor(specific), 
			  specific._text,  
				!(specific instanceof Feature) || (specific as Feature).ownedFeatureChaining.empty)		
		}
		val general = specialization.general
		if (general !== null) {
			createNode(parentNode, general, getImageDescriptor(general), general._text, 
				!(general instanceof Feature) || (general as Feature).ownedFeatureChaining.empty)
		}
	}
	
	def boolean _isLeaf(Conjugation conjugation) {
		conjugation.originalType === null
	}
	
	def void _createChildren(IOutlineNode parentNode, Conjugation conjugation) {
		val conjugatedType = conjugation.conjugatedType
		if (conjugatedType !== null && conjugatedType !== conjugation.eContainer) {
			createNode(parentNode, conjugatedType, 
				getImageDescriptor(conjugatedType), conjugatedType._text, 
				!(conjugatedType instanceof Feature) || (conjugatedType as Feature).ownedFeatureChaining.empty
			)			
		}
		val originalType = conjugation.originalType
		if (originalType !== null) {
			createNode(parentNode, originalType, 
				getImageDescriptor(originalType), originalType._text, 
				!(originalType instanceof Feature) || (originalType as Feature).ownedFeatureChaining.empty
			)
		}
	}
	
	def boolean _isLeaf(Disjoining disjoining) {
		disjoining.disjoiningType === null
	}
	
	def void _createChildren(IOutlineNode parentNode, Disjoining disjoining) {
		val typeDisjoined = disjoining.typeDisjoined
		if (typeDisjoined !== null && typeDisjoined !== disjoining.eContainer) {
			createNode(parentNode, typeDisjoined, getImageDescriptor(typeDisjoined), typeDisjoined._text,  
				!(typeDisjoined instanceof Feature) || (typeDisjoined as Feature).ownedFeatureChaining.empty)			
		}
		val disjoiningType = disjoining.disjoiningType
		if (disjoiningType !== null) {
			createNode(parentNode, disjoiningType, getImageDescriptor(disjoiningType), disjoiningType._text, 
				!(disjoiningType instanceof Feature) || (disjoiningType as Feature).ownedFeatureChaining.empty)
		}
	}
	
	def boolean _isLeaf(FeatureInverting inverting) {
		inverting.invertingFeature === null
	}
	
	def void _createChildren(IOutlineNode parentNode, FeatureInverting inverting) {
		val featureInverted = inverting.featureInverted
		if (featureInverted !== null && featureInverted !== inverting.eContainer) {
			createNode(parentNode, featureInverted, getImageDescriptor(featureInverted), featureInverted._text,  
				featureInverted.ownedFeatureChaining.empty)			
		}
		val invertingFeature = inverting.invertingFeature
		if (invertingFeature !== null) {
			createNode(parentNode, invertingFeature, getImageDescriptor(invertingFeature), invertingFeature._text, 
				invertingFeature.ownedFeatureChaining.empty)
		}
	}
	
	def _isLeaf(Type type) {
	    isLeaf(type as Namespace) && TypeUtil.isImplicitGeneralTypesEmpty(type) 	
	}
	
	def void _createChildren(IOutlineNode parentNode, Type type) {		
		//ImplicitFieldAdapter.getOrCreateAdapter(type).
		createImplicitGeneralizationNodes(parentNode, type)
		if (type instanceof Feature) {
			createImplicitTypeFeaturingNodes(parentNode, type)
		}
		createChildren(parentNode, type as Namespace)
		createImplicitBindingConnectorNodes(parentNode, type)
	}
	
	def createImplicitGeneralizationNodes(IOutlineNode parentNode, Type type) {
		TypeUtil.forEachImplicitGeneralTypeOf(type, [eClass, generalType |
			/*
			 * TODO here image dispatcher should be called with a type that
			 * returns that appropriate icon for generalizations, but there
			 * are no such icons added yet; in the future, the generalType
			 * reference might return an unexpected icon if at a later point
			 * type-specific icons are added.
			 */
			val implicitNode = new ImplicitNode(parentNode, 
				getImageDescriptor(generalType).createImage(true), eClass
			)
			
			// Traversal does not know about the new node, children have to be created here
			if (generalType !== null) {
				createNode(implicitNode, generalType, 
					getImageDescriptor(generalType), getText(generalType).toString(), 
					!(generalType instanceof Feature) || (generalType as Feature).ownedFeatureChaining.isEmpty
				)
			}
		])
	}
	
	def createImplicitTypeFeaturingNodes(IOutlineNode parentNode, Feature feature) {
		FeatureUtil.forEachImplicitFeaturingTypeOf(feature, [featuringType |
			/*
			 * TODO here image dispatcher should be called with a type that
			 * returns that appropriate icon for generalizations, but there
			 * are no such icons added yet; in the future, the generalType
			 * reference might return an unexpected icon if at a later point
			 * type-specific icons are added.
			 */
			val implicitNode = new ImplicitNode(parentNode, 
				getImageDescriptor(featuringType).createImage(true), SysMLPackage.Literals.TYPE_FEATURING
			)
			// Traversal does not know about the new node, children have to be created here
			if (featuringType !== null) {
				createNode(implicitNode, featuringType, 
					getImageDescriptor(featuringType), featuringType._text, 
					true
				)
			}
		])
	}
	
	def createImplicitBindingConnectorNodes(IOutlineNode parentNode, Type type) {
		TypeUtil.forEachImplicitBindingConnectorOf(type, [connector, eClass |
			/*
			 * TODO here image dispatcher should be called with a type that
			 * returns that appropriate icon for generalizations, but there
			 * are no such icons added yet; in the future, the generalType
			 * reference might return an unexpected icon if at a later point
			 * type-specific icons are added.
			 */
			val implicitNode = new ImplicitNode(parentNode, 
				getImageDescriptor(connector).createImage(true), eClass)
			implicitNode.createNode(connector, getImageDescriptor(connector), connector.eClass.getName, false)
		])
	}
	
	def _isLeaf(Association association) {
		false
	}
	
	def _createChildren(IOutlineNode parentNode, Association association) {
		createRelatedElements(parentNode, association)
		_createChildren(parentNode, association as Type)
	}

	def _isLeaf(Connector connector) {
		false
	}
	
	def _createChildren(IOutlineNode parentNode, Connector connector) {
		createRelatedElements(parentNode, connector)
		_createChildren(parentNode, connector as Type)
	}

	def void _createChildren(IOutlineNode parentNode, OperatorExpression expression) {
		createImplicitGeneralizationNodes(parentNode, expression)
		createImplicitTypeFeaturingNodes(parentNode, expression)
		for (Relationship relationship : expression.ownedRelationship) {
			createNode(parentNode, relationship, 
				getImageDescriptor(relationship), 
				if (relationship instanceof Membership) (relationship as Membership)._text 
				else relationship._text, 
				false
			);
		}
		createImplicitBindingConnectorNodes(parentNode, expression)
	}
	
//	override 
 def	_createNode(DocumentRootNode parentNode, EObject modelElement) {
		var text = getText(modelElement);
		if (text === null) {
			text = modelElement.eResource().getURI().trimFileExtension().lastSegment();
		}
		createNode(parentNode, modelElement, getImageDescriptor(modelElement), text.toString,
				isLeaf(modelElement));
	}
	
//	override 
 def _createNode(IOutlineNode parentNode, EObject modelElement) {
		var Object text = getText(modelElement);
		val isLeaf = isLeaf(modelElement);
		if (text === null && isLeaf)
			return;
		createNode(parentNode, modelElement, getImageDescriptor(modelElement), text.toString, isLeaf);
	}
	
	protected def AbstractOutlineNode createNode(IOutlineNode parentNode, EObject modelElement, ImageDescriptor imageDescriptor, String text,
			boolean isLeaf) {
		if (modelElement.eResource !== null) {
			super.getOutlineNodeFactory.createEObjectNode(parentNode, modelElement, imageDescriptor, text, isLeaf)
		} else {
			val node = new ImplicitNode(parentNode, imageDescriptor.createImage(true), text)
			if (modelElement instanceof Element) {
				ElementUtil.transform(modelElement);
			}
			createChildren(node, modelElement)
			node
		}
	}
	
}
